#-----------------------------------------------------------------
# pycparser: func_defs.py
#
# Using pycparser for printing out all the functions defined in a
# C file.
#
# This is a simple example of traversing the AST generated by
# pycparser. Call it from the root directory of pycparser.
#
# Eli Bendersky [https://eli.thegreenplace.net/]
# License: BSD
#-----------------------------------------------------------------
from __future__ import print_function
import sys

# This is not required if you've installed pycparser into
# your site-packages/ with setup.py
sys.path.extend(['.', '..'])

from pycparser import c_ast, parse_file


# A simple visitor for FuncDef nodes that prints the names and
# locations of function definitions.
class FuncDefVisitor(c_ast.NodeVisitor):
    def visit_FuncDef(self, node):
        final_product = ""
        #static or not
        print(node.decl.storage)
        #final_product += node.decl.storage
        #this logic looks at the function declaration
        if isinstance(node.decl.type.type, c_ast.PtrDecl):
            print(node.decl.type.type.type.type.names)
            print("*")
            print(node.decl.type.type.type.declname)
        else:
            print(node.decl.type.type.type.names)
            print(node.decl.type.type.declname)
        #this logic looks at ALL arguments passed in function declaration 
        if node.decl.type.args is not None:
            for argument in range(len(node.decl.type.args.params)):
                #print(node.decl.type.args.params[argument].type)
                if isinstance(node.decl.type.args.params[argument].type, c_ast.PtrDecl):
                    print(node.decl.type.args.params[argument].type.type.type.names)
                    print("*")
                else: 
                    print(node.decl.type.args.params[argument].type.type.names)
                print(node.decl.type.args.params[argument].name)
        else:
            print("no arguments")
        #print(node.decl.type.type.type.type.names)
        print('%s at %s' % (node.decl.name, node.decl.coord))


def show_func_defs(filename):
    # Note that cpp is used. Provide a path to your own cpp or
    # make sure one exists in PATH.
    ast = parse_file(filename, use_cpp=True,
                     cpp_args=r'-Iutils/fake_libc_include')

    v = FuncDefVisitor()
    v.visit(ast)


if __name__ == "__main__":
    if len(sys.argv) > 1:
        filename  = sys.argv[1]
    else:
        filename = 'examples/c_files/memmgr.c'

    show_func_defs(filename)
